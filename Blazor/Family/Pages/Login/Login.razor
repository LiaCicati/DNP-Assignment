@page "/login"
@using Family.Authentication

@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<section class="login">
    <AuthorizeView>
        <NotAuthorized>
            <h2 class="heading">Please, Log In</h2>
            <form name="login" class="form">


                <label class="label">User name</label>
                <input class="input" type="text" placeholder="user name" @bind-value="_username"/>


                <label class="label">Password</label>
                <input class="input" type="password" placeholder="password" @bind-value="_password"/>

                <div class="input__error-message">@_errorMessage</div>
                <button class="login-button" type="button" @onclick="PerformLogin">
                    Login
                </button>
            </form>
        </NotAuthorized>
        <Authorized>
            @if (true)
            {
                _navigationManager.NavigateTo("/");
            }
        </Authorized>
    </AuthorizeView>
</section>

@code {
    private string _username;
    private string _password;
    private string _errorMessage;

    public async Task PerformLogin()
    {
        _errorMessage = "";
        try
        {
            await Task.Run(() =>
            {
                ((CustomAuthenticationStateProvider) _authenticationStateProvider).ValidateLogin(_username, _password);
                _username = "";
                _password = "";
            });
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

}
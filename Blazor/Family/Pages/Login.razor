@page "/login"
@namespace LoginComponent
@using Family.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <form>
            <div class="form-group">
                <label>User name:</label>
                <input type="text" placeholder="user name" @bind-value="username"/>
            </div>
            <div class="form-group">
                <label>Password</label>
                <input type="password" placeholder="password" @bind-value="password"/>
            </div>
            <div style="color:red">@errorMessage</div>
            <button type="button" @onclick="PerformLogin">
                Login
            </button>
        </form>


    </NotAuthorized>
    <Authorized>
        @if (true)
        {
            NavigationManager.NavigateTo("/");
        }
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    // public async Task PerformLogout() {
    //     errorMessage = "";
    //     username = "";
    //     password = "";
    //     try {
    //         ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
    //         NavigationManager.NavigateTo("/");
    //     } catch (Exception e) { }
    // }

}
@page "/statistics"
@using Models
@using Family.Data
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@inject IAdultService _adultService;
@inject NavigationManager _navigationManager


<SfAccumulationChart Title="Eye color statistics">
    <AccumulationChartSeriesCollection>
        <AccumulationChartSeries DataSource="@_data" XName="XValue" YName="YValue"
                                 Name="Color">
            <AccumulationDataLabelSettings Visible="true" Name="total" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
        </AccumulationChartSeries>
    </AccumulationChartSeriesCollection>

    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
</SfAccumulationChart>


<SfAccumulationChart Title="Hair statistics">
    <AccumulationChartSeriesCollection>
        <AccumulationChartSeries DataSource="@_dataSource" XName="XValue" YName="YValue" Name="Hair"
                                 Type="AccumulationType.Pyramid" Width="30%" Height="90%">
            <AccumulationDataLabelSettings Visible="true" Name="total" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
        </AccumulationChartSeries>
    </AccumulationChartSeriesCollection>

    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
</SfAccumulationChart>


@code{
    private IList<Adult> _adults;
    private static IList<Adult> _adultsData;


    public class PieChart
    {
        public string XValue { get; set; }
        public double YValue { get; set; }
        public string Total { get; set; }
    }

    private readonly List<PieChart> _data = new List<PieChart>();
    private readonly List<PieChart> _dataSource = new List<PieChart>();


    protected override async Task OnInitializedAsync()
    {
        _adults = _adultService.GetAdults();
        _adultsData = _adults;
        _data.Add(new PieChart {XValue = "Grey", YValue = GetPersonsWithEyeColor("Grey")});
        _data.Add(new PieChart {XValue = "Brown", YValue = GetPersonsWithEyeColor("Brown")});
        _data.Add(new PieChart {XValue = "Blue", YValue = GetPersonsWithEyeColor("Blue")});
        _data.Add(new PieChart {XValue = "Green", YValue = GetPersonsWithEyeColor("Green")});
        _data.Add(new PieChart {XValue = "Amber", YValue = GetPersonsWithEyeColor("Amber")});
        _dataSource.Add(new PieChart {XValue = "Brown", YValue = GetPersonWithHairColor("Brown")});
        _dataSource.Add(new PieChart {XValue = "Black", YValue = GetPersonWithHairColor("Black")});
        _dataSource.Add(new PieChart {XValue = "White", YValue = GetPersonWithHairColor("White")});
    }

    int GetPersonWithHairColor(string hairColor)
    {
        int p = 0;
        foreach (var adult in _adultsData)
        {
            if (String.Equals(hairColor, adult.HairColor, StringComparison.CurrentCultureIgnoreCase))
            {
                p++;
            }
        }
        return p;
    }


    int GetPersonsWithEyeColor(string eyeColor)
    {
        int p = 0;
        foreach (var adult in _adultsData)
        {
            if (String.Equals(eyeColor, adult.EyeColor, StringComparison.CurrentCultureIgnoreCase))
            {
                p++;
            }
        }
        return p;
    }

}
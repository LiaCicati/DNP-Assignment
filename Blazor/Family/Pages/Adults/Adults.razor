@page "/adults"
@using Models
@using Family.Data
@inject IAdultService _adultService;
@using Family.Shared.Components.AdultCard

<section class="adults">
    <h3>Adult data</h3>
    <div class="search">
        <div class="search__container">

            <img class="search__icon" src="images/search-icon.svg" alt="Search icon"/>
            <input
                placeholder="Search person"
                class="search__input"
                type="text"
                @oninput="@((arg) => FilterByFirstName(arg))"/>

            <div class="filter">
                <input class="input" placeholder="Filter by id" type="number" @oninput="@((arg) => FilterByUserId(arg))"/>
                <span class="filter__title">Id</span>
            </div>
        </div>
    </div>


    @if (_adultsToShow == null)
    {
        <p>
            No data
        </p>
    }
    else
    {
        <div class="row" style="margin-top: 40px;">
            @foreach (var adult in _adultsToShow)
            {
                <AdultCard AdultItem="@adult" RemoveAdult="RemoveAdult" >
                </AdultCard>
            }
        </div>
    }
</section>


@code {
    private IList<Adult> _adults;
    private IList<Adult> _adultsToShow;

    private int? _filterById;
    private string _filterByName;

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        _filterById = null;
        try
        {
            if (changeEventArgs.Value != null) _filterById = int.Parse(changeEventArgs.Value.ToString() ?? throw new InvalidOperationException());
        }
        catch (Exception e)
        {
    // ignored
        }
        ExecuteFilter();
    }

    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        _filterByName = null;
        try
        {
            if (changeEventArgs.Value != null) _filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
    //
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        _adultsToShow = _adults.Where(a => (_filterById != null && a.Id == _filterById || _filterById == null) &&
                                           ((_filterByName != null && a.FirstName.ToLower().Contains(_filterByName.ToLower()) || _filterByName == null) || (_filterByName != null && a.LastName.ToLower().Contains(_filterByName.ToLower())) || _filterByName == null)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        _adults = await _adultService.GetAdults();
        _adultsToShow = _adults;
        Console.WriteLine("###############" + _adultsToShow.Count);
    }

    private async Task RemoveAdult(int adultId)
    {
        Adult adultToRemove = _adults.First(a => a.Id == adultId);
        await _adultService.RemoveAdult(adultId);
        _adults.Remove(adultToRemove);
        _adultsToShow.Remove(adultToRemove);
    }

}
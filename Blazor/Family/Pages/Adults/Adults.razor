@page "/adults"
@using Models
@using Family.Data
@using Microsoft.AspNetCore.Mvc.Filters
@inject IAdultService _adultService;


<h3>Adult data</h3>
<p> Filter by User Id: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width:50px"/> </p>
 <p>
        Filter by First Name:
        <input type="text" @oninput="@((arg) => FilterByFirstName(arg))"/>
    </p>


@if (AdultsToShow == null)
{
    <p>
        No data found
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Job title</th> <br/>
            <th>User ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Salary</th>
            <th>Hair colour</th>
            <th>Eye colour</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in AdultsToShow)
        {
            <tr>
                <td>@item.JobTitle.JobTitle</td>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.JobTitle.Salary</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>
                    <button @onclick="@(() => RemoveAdult(item.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> AdultsToShow;
    private IList<Adult> AllAdults;

    private int? filterById;
    private bool? filterByIsCompleted;
    private string? filterByName;

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
    // ignored
        }
        ExecuteFilter();
    }
    
    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }
    private void ExecuteFilter()
    {
        AdultsToShow = AllAdults.Where(a => (filterById!=null && a.Id == filterById || filterById == null) &&
                                            (filterByName != null && a.FirstName.ToLower().Contains(filterByName.ToLower()) || filterByName == null )).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        AllAdults = _adultService.GetAdults();
        AdultsToShow = AllAdults;
    }

    private void RemoveAdult(int adultId)
    {
        Adult adultToRemove = AllAdults.First(a => a.Id == adultId);
        _adultService.RemoveAdult(adultId);
        AllAdults.Remove(adultToRemove);
        AdultsToShow.Remove(adultToRemove);
    }

}
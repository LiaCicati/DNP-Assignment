@page "/adults"
@using Models
@using Family.Data
@inject IAdultService _adultService;
@using Family.Shared.Components.AdultCard

<section class="adults">
    <h3>Adult data</h3>
    <div class="search">
        <div class="search__container">

            <img class="search__icon" src="images/search-icon.svg" alt="Search icon"/>
            <input
                placeholder="Search person"
                class="search__input"
                type="text"
                @oninput="@((arg) => FilterByFirstName(arg))"/>

            <div class="filter">
                <input class="input" placeholder="Filter by id" type="number" @oninput="@((arg) => FilterByUserId(arg))"/>
                <span class="filter__title">Id</span>
            </div>
        </div>
    </div>


    @if (adultsToShow == null)
    {
        <p>
            No data
        </p>
    }
    else
    {
        <div class="row" style="margin-top: 40px;">
            @foreach (var adult in adultsToShow)
            {
                <AdultCard AdultItem="@adult" RemoveAdult="RemoveAdult">
                </AdultCard>
            }
        </div>
    }
</section>


@code {
    private IList<Adult> adults;
    private IList<Adult> adultsToShow;

    private int? filterById;
    private bool? filterByIsCompleted;
    private string? filterByName;

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
    // ignored
        }
        ExecuteFilter();
    }

    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = adults.Where(a => (filterById != null && a.Id == filterById || filterById == null) &&
                                         ((filterByName != null && a.FirstName.ToLower().Contains(filterByName.ToLower()) || filterByName == null) || (filterByName != null && a.LastName.ToLower().Contains(filterByName.ToLower())) || filterByName == null)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        adults = _adultService.GetAdults();
        adultsToShow = adults;
    }

    void RemoveAdult(int adultId)
    {
        Adult adultToRemove = adults.First(a => a.Id == adultId);
        _adultService.RemoveAdult(adultId);
        adults.Remove(adultToRemove);
        adultsToShow.Remove(adultToRemove);
    }

}